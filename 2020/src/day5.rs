//You board your plane only to discover a new problem: you dropped your boarding pass! You aren't sure which seat is yours, and all of the flight attendants are busy with the flood of people that suddenly made it through passport control.

//You write a quick program to use your phone's camera to scan all of the nearby boarding passes (your puzzle input); perhaps you can find your seat through process of elimination.

//Instead of zones or groups, this airline uses binary space partitioning to seat people. A seat might be specified like FBFBBFFRLR, where F means "front", B means "back", L means "left", and R means "right".

//The first 7 characters will either be F or B; these specify exactly one of the 128 rows on the plane (numbered 0 through 127). Each letter tells you which half of a region the given seat is in. Start with the whole list of rows; the first letter indicates whether the seat is in the front (0 through 63) or the back (64 through 127). The next letter indicates which half of that region the seat is in, and so on until you're left with exactly one row.

//For example, consider just the first seven characters of FBFBBFFRLR:

//Start by considering the whole range, rows 0 through 127.
//F means to take the lower half, keeping rows 0 through 63.
//B means to take the upper half, keeping rows 32 through 63.
//F means to take the lower half, keeping rows 32 through 47.
//B means to take the upper half, keeping rows 40 through 47.
//B keeps rows 44 through 47.
//F keeps rows 44 through 45.
//The final F keeps the lower of the two, row 44.

//The last three characters will be either L or R; these specify exactly one of the 8 columns of seats on the plane (numbered 0 through 7). The same process as above proceeds again, this time with only three steps. L means to keep the lower half, while R means to keep the upper half.

//For example, consider just the last 3 characters of FBFBBFFRLR:

//Start by considering the whole range, columns 0 through 7.
//R means to take the upper half, keeping columns 4 through 7.
//L means to take the lower half, keeping columns 4 through 5.
//The final R keeps the upper of the two, column 5.

//So, decoding FBFBBFFRLR reveals that it is the seat at row 44, column 5.

//Every seat also has a unique seat ID: multiply the row by 8, then add the column. In this example, the seat has ID 44 * 8 + 5 = 357.

//Here are some other boarding passes:

//BFFFBBFRRR: row 70, column 7, seat ID 567.
//FFFBBBFRRR: row 14, column 7, seat ID 119.
//BBFFBBFRLL: row 102, column 4, seat ID 820.

//As a sanity check, look through your list of boarding passes. What is the highest seat ID on a boarding pass?

fn get_seat_id(seat: &str) -> f32 {
    let row = seat
        .chars()
        .take(7)
        .fold((0.0, 127.0), |(min, max), curr| match curr {
            'B' => (((max + min) / 2f32).ceil(), max),
            'F' => (min, ((max + min) / 2.0).floor()),
            _ => (min, max),
        });
    let col = seat
        .chars()
        .skip(7)
        .fold((0.0, 7.0), |(min, max), curr| match curr {
            'R' => (((max + min) / 2f32).ceil(), max),
            'L' => (min, ((max + min) / 2.0).floor()),
            _ => (min, max),
        });
    row.0 * 8.0 + col.0
}

pub fn find_highest_seat() -> f32 {
    SEATS.lines().fold(0.0, |highest_seat, seat| {
        let current_seat = get_seat_id(seat);
        if current_seat > highest_seat {
            return current_seat;
        }
        highest_seat
    })
}

pub fn find_my_seat() -> f32 {
    let mut seats: Vec<_> = SEATS.lines().map(|seat| get_seat_id(seat)).collect();
    seats.sort_unstable_by(|a, b| a.partial_cmp(b).unwrap());
    let (_, my_seat) = seats
        .iter()
        .enumerate()
        .skip(1)
        .find(|(i, seat_id)| **seat_id + 1.0 != seats[i + 1])
        .unwrap();
    my_seat + 1.0
}

const SEATS: &str = "BFBBBFBLRR
BBFFFFFLRR
BFBFBFFRLR
FBBBBFFLLL
BFBBBBFRRL
FFBFFBFRLR
FFFBFBBRRL
FBFBBFBLRL
FBFFFBFLLR
FFBBFBBLLL
FBFBBFFRLL
FFBFFBFLRL
FFBFBFFRRR
BFFFFBBLRR
FFBFFBFRRL
FFBFBFFLRL
BBFFFFFRLL
FFFBFBBRRR
FBFBFBBLLR
FBFBFBFLLR
BFBFBFFRLL
FFFBFFBRLL
BBFFFBFLRL
BFBFBFBLLR
FFFFBBBRLL
FFBBBFFLRL
FBFFBFBRLR
FFBFBBFLLR
FBFBFFFRRL
BFBBFBBLRR
BFBFFFBRRR
BFFBBBFRLL
FFBFFFFRRL
FFFFBBFLRL
BBFFFBBRLR
BFFBFBBRRL
BFFFFFBLRR
FBFFFFBLLL
FFBFBBFLLL
BFBBBFBRRR
BBFFFBFLLR
FBBBFFFRRL
BFBBBBBLLL
BFBFFFBRLR
FFBBFBBLRR
FBFBFFFLLL
BFBBBFBRLL
BFFBFBFRRL
BFBFBFFRRR
FBBFFFFLLR
FFBBBFFLLL
BFFBFBBRRR
FFBFBFBRRR
FFFBBFFRRR
FFBBFBFRLR
FBBBFBFRRR
FFBFFBFRLL
BFBBBFFRLR
FBFFFFFRLR
BFBBBFBRRL
FBFFBFBRRL
FFBFBBFRLL
FFFBBBBLLL
FFBBBFBLLR
FFBBFFBRRR
FFBBBBFRRR
FFBFBBBLRL
FBBBBBFLLR
BFBFBBFLLR
FFFBBBFRLL
BFBFFBBRRL
FBFBBFBLLL
FBFFBBFLRR
FBBBFBFLRL
FFBBFBFRLL
FFBBBFFRRR
BFFBBBBRLR
FFBFFBBRLL
FBFBFBBRRL
FFBFFBFLLR
FBFBFFBLLR
FBFBBFFLLL
FBFBBFBLLR
FBBFBBFRLL
BFFFBFFRLL
FFBBBFFRLL
FBFBBFBRRR
BFFBBFFRLL
FFBFBBFRRR
FBBFFFFRRL
BFBBFBFLRR
BFBFFFFLRL
BFFFFBBRRR
BFFBFFBLRR
FBFFFBFLRL
FBFBFBFLRL
FFBBFBFRRR
BFFFFBFRRR
FBBBBBFLRL
BFFFBBBRLL
BFFBBBBLRR
FFBBBBFRLR
BFFFBBFRLR
FBBFFBFLLR
FBFBBBFLRR
FBFFFFBRRR
FFBBBBBLLR
FFBBFFFRRL
FBBFFBBLRL
FBFBBBFRRL
BFFBFBFRRR
FFBBBBFLLR
FFBBFFBLRL
FFBBBBBRLL
FFFBFBBLRL
BFFFBFFLRR
BFBBBFFLRR
FFBFFFFRRR
FBBFFBBLLR
FBBBBFFRRR
BFBBBFFRRL
FBBFFBBLLL
FBFBFBBLRL
BFBBBFFLLR
BBFFFBBLRL
FBBBFBBLLR
BBFFBFFLLL
FBBBFFFRRR
BFFBBFFLRR
FFBBFFFRLL
BFBBFFFLRR
FFBFFFFLLR
FFFBFFBLLL
FFBBBFFRLR
FFBFFFBRRR
FBFBBBBLRL
FBBFBBBRLL
FBBFBFFLLR
FFFFBFBLRR
BFFFBBFLRL
FBFFBBFRLR
BBFFFFBRRR
FFFBBBFLRL
FBBFBFFRRR
BFFBBFBRRR
FFFFBBBRLR
FBBBFBBRLL
FBBFBFFRRL
FBFFFFBLRR
BFFBBBBLRL
FBBBBBFRLR
FFFBFFBLLR
FBBFBFBRLR
FBBBBBFRRR
BFBBFFBRLR
BFFFFFBRRR
FFFBFFBRRR
BFBBBBFLLL
BFBFFFFLRR
FFBBFBBRRR
BBFFFBFRLL
FFBBBBBLRR
FBBBFBFLLR
FBFFFFFRLL
FFBBFFBLRR
FBFFFFFLRR
BFBBFBFRRR
FFBBFFBRLR
FBBFFFBLLL
BFFBFBFLLR
FBBFBFFRLL
FBBBBFBLRL
BFFFFBFRRL
FBFBBFBRRL
BFFFFBBLLL
FBFFBFBLLR
BFFBBFBRLL
BFBFFFBRRL
FBFFBFFLLR
BFBFFFFRRL
FFBFFFBRLR
FFBBBBFLRR
BBFFFFBLLL
BFBBBBBRLL
FFBFBBFRLR
BBFFFFFRLR
FBFFFBBRRR
BFFFBFBRLL
FBBBBFFLRL
BFFFFBFLRR
FBBFBFFLRL
BFBFBFBLRL
FBBFFBFRLR
FBBFFFBLLR
FBBBBFFRLL
BFBBBFFRRR
FBBFBBFLLR
FBBFFBFLRL
BFFBFBBLLR
FBBBFBFLLL
FBBBBBBRRR
FBFBBFBRLR
FFBFBFBRRL
FBFBBBBRRR
FFBBBFBLRR
FBFFBFBLRL
FFBFFFBLRL
BFBFBFFLRR
FBFFFFBLRL
BFFBFFFLRR
BFBBBBFRLL
FBFFBBBLRL
FBFBFBBLRR
BFBFFFBLRL
BFBFBBBLRL
FFBFBFBLRL
BFFBFFBRRL
BBFFFBFRRR
FFFBFFFRLR
FFFBFBFRRL
FFBBBFFLRR
BFBBBFFRLL
BFBBFBBLLL
FBBBBFBLLL
BFFFBFFRLR
BFFBBFBLLL
FFBBFBFLLL
FFFBFBFLLR
FBFFBFFLRR
BFBFFBFRLR
BFFBBBFLLL
FFBFFFBLLL
FFFBFFFRRL
FFBFFFBLRR
FBBFBBFRRR
BBFFFBBLLR
BFFFBFFLLR
FFBFBBBRLL
BFFFBBBLRR
FFBFBFFLLL
FFBFFBBLLL
BFBBFBBRRL
BBFFFFFRRL
FBFFBFFLLL
FFBFFBFLRR
BBFFFFFRRR
FBBFFFBRRL
FBFFBBFLRL
BFFBBBFRRL
BFBBFFFRRL
BFBFFBFLRR
FBBBFFFLLR
FFFFBBBLLR
BFFBFFBLRL
FFBFFFBLLR
FFFBFBBRLL
FBFBBBFLLL
BFBFBFBRRL
BFFFBBBRRL
FFFFBBFRRR
FBBFBBBLRL
FFBBBBBLLL
BBFFBFFLLR
FBFFBBBLLR
BFBFFBFRLL
BFFFFFBLRL
FFFFBFBLLL
FBBBBFBRRL
FBFBFFBLRR
FFFBBFFLLR
FBFBFBFLRR
BBFFFBBLRR
FFFBBFBLLR
FFBBBFBRRR
FFFBBBFRRR
BFBFBFFLLL
FBBBBBFRRL
BFFBFFBLLR
FFBFBBFLRR
BFFBFBBLRR
FBBBFBBLRL
FBFFBBFRLL
BFFBBBBRRL
BFFBBBBRRR
BFFFBBFRLL
BFBBBBBLRR
FFBBBBFLRL
FBBBBFFLRR
BFBFFBBRLR
FBBFBBBLRR
FBFBFBBRRR
BBFFFBBRLL
FBBBBFBRLL
FFBFBFFLLR
FBFFFBFRRR
BFBFBBFRRR
BFFFBFFRRL
BFBFFBFLLR
FFFBBBBLLR
FBBBFFFLRL
FBBFBBFRRL
FBBFBBBLLR
BFFFFBBLLR
FBBBBBBLLL
BFFFFFFRRR
FFFBBBBRLR
FFFBFBFRLR
FFFFBFBLRL
FBFBFFBRRR
FBBBBBBLRR
BFBBBFBRLR
FBFBBBFRLL
FBBFFBBLRR
BFFFBBFRRL
FBBBBFFRLR
BFFBFFBRRR
BFFFBFBLLR
BFFFBBBRRR
BFFBBBFLRL
BFBBFBBLRL
BFFBBFFLLR
BFFFFFBRLR
FBBFFBBRRL
BFFFFFBRRL
FBBBFFBLRL
FBFBBFBRLL
BFFBFBFLLL
BFFBFBBRLR
BFFBFFFLRL
BFBFBBBLLR
FBFBFFBRLL
BFFBBFBLLR
BFFBFBBLLL
BFFBBFBLRL
FBBFFBFRRL
BFBFBBFRLR
FBFFFFBRRL
FBFBFFFRRR
FFFBBFFRRL
FFFFBFBRRL
BFFFFFFLLR
FBBFFFFRLR
FBFBBFFRLR
FFBBFFBRRL
FBBFBBFRLR
FFBBFBFLRL
FFFFBBBLLL
FFBBFFFLLR
BFBBFBBRLL
BFFFFBBRRL
BFFBBFBRRL
FBBFBBBRRL
BFBFBFFLRL
FBFFFBBLRL
FFFFBBBRRR
FBFFBBFLLR
BFFBBFBRLR
FBBFBBFLRL
FFBBFFFRLR
BBFFFBBRRR
FFBBBBBLRL
FBBBBBBRLL
FFFBBBFRLR
FFBBFBFRRL
FFBBBBBRRL
BFBFBBFRLL
FBFFBFFRLR
BFBFBBBRLR
FFBFFFFLRL
FBFFBFBLRR
FBFFBFBRRR
FFFBBFBRRR
FBFFFBFLLL
BFFBFBFRLL
FBFFBFBRLL
FFBFFBBLRR
FFFFBFBRLR
BFFBBBBRLL
BFBBFFBLRR
FFBFFBFLLL
FFBFBBBRLR
FFBFFFFRLR
FBBFFFBRLR
BFFFFFFLLL
BFBBBFFLRL
FBBFBFFLLL
BFBBFBBRRR
BFBFFBBRLL
FBBFBFBLRL
BBFFFFFLLL
FBFFFBFRRL
BFBBBFBLLR
BFFFFBBRLL
FFBFBBFLRL
FFFBFBBLLR
FBFBFFFLRR
FBBBBBBLLR
BFFBFFBRLL
FBFFBFFRRL
FFBFBBBLLR
FBBBFBFLRR
FFBFBBBRRL
FBBFFBBRLR
BFFFBBBLRL
FBBFBBBRRR
BFFBBBFLRR
FBBFFFBRRR
BFBFFFFRLL
BFBBBBBRRR
FBFBBFFRRR
FBBBBBFLRR
FBBBFFBLRR
FFBBBBBRRR
FFFBFFFLLR
BFBBBBFRRR
BFFBFBFLRR
BFFFBBFLLR
FBFFFFFLLL
FBBFFFFRLL
BFFBBBFRLR
BBFFFFBLLR
FBBBBFFLLR
BFFFBFBRLR
BBFFFFFLRL
BFFFFBFLRL
BFFFFBBLRL
FBFFBBBLRR
FBFFBBBRRR
FBFBBFBLRR
FBBBBBBRRL
FFFBFFBLRL
FBFBFBFRLR
FFFBBFBLRR
BFBFFBFLRL
BFBFFFBRLL
BFFFBFBRRR
FBFBBBFLLR
BFFBBBFRRR
BFBFBBFLRR
FBBFBFBLLL
FBFBBBFRRR
BFBBBBFRLR
FFFBBBBLRL
FFFBFFFLLL
FFFBBBFLLL
BFBBFFBRRL
BFBBFBBLLR
FFBBBBFRLL
FBBBBFFRRL
FFBBBFBRRL
FBBFFFBLRL
FFBFFBBRLR
BFBFFBBLLL
FBFFFBFLRR
FFBBFFBLLL
BFFFFBFLLR
FFFBFBFLRL
FFFBBBBRLL
BBFFFBBRRL
BFBFFBBLRR
FFFFBFBLLR
BFBBFBFLLR
BFBBFBFRRL
FFBBFBBLLR
FBFFBBFRRL
BFFBBFFRRL
FBFBBBBLLR
FBFBBBFRLR
BFBFFFFLLL
FFBBFFBLLR
FBFFBBFRRR
BFFFFFFRLL
FBFFFFFLLR
FFFBFFBRRL
FFBBFBBLRL
FBBFBFBLLR
BBFFFBFRRL
FFBBFBFLRR
BFBBFBFLRL
FBFBBBFLRL
BFFFFFFLRL
FFFBFBBRLR
FFBBFBBRLR
FBBFFBFLLL
BFFBFBBLRL
FBFFBBBLLL
FBBBFFFLRR
BFFBBBBLLL
FBBBFBFRLL
FBBBFBBLRR
FBFFFBBRLL
FFBFBBBLRR
FBFBFFFLRL
BFFBFFFRLR
FFBBBFBRLR
FFFBBFBRLL
BFFFFFFLRR
FBBBFBBRRR
FBFFBFFLRL
FBFFBFBLLL
FBBBFBFRLR
FBFBFBBRLL
FBBBFBBLLL
FFBBBFBRLL
FFFBFBFLLL
FBFFFBBRRL
BFFFBFFLLL
FBBFBFBLRR
FBBBBFBLRR
FBBFFBFLRR
FBBBBBBLRL
BFFBFFFRLL
BFBFBBFRRL
BFBFFFFRRR
BFFFBFBRRL
FFFFBFBRLL
FBFBBFFLRR
BBFFFBFLLL
BFBBFFBRRR
FBBFBFBRRR
FBFFBFFRLL
BFBFBBBLRR
FBBFFBFRRR
FBBFBFBRLL
BFFFFBBRLR
BFBFBBBLLL
FBFBFBFLLL
BFFBFFBRLR
BFBFFFBLLR
FFFBFFFRLL
FBFFFFFRRR
FFFBFFFLRR
FFBFFBFRRR
BFFFFBFLLL
FBBBBFBRRR
FBBBFFFLLL
FFBFFBBLLR
BFFFFFFRRL
FFFFBBBLRL
FBFBFBBRLR
FBBBFFBRLR
FBBFBFFRLR
BBFFFBFRLR
FBBFBBFLLL
FBBFFFFLRR
FBFFFBBLLL
BFBBFFFRLL
FFFBFBFRLL
BFFFBBFRRR
FFBFFBBRRL
BBFFFBBLLL
BBFFFFFLLR
BBFFFFBRLL
FBBBFFBRLL
FBFBFBFRRL
FFFBFBBLLL
BFFBFBFLRL
BFBFFBBRRR
FFFBBBBRRL
BFFFBBFLLL
FBFFBBBRLL
FFFBFBBLRR
FBBFFFBLRR
BFBBFFFLLR
FFBBFFFLRL
FBBBFFBRRR
FFFBBFFRLR
FBFFFFBLLR
BFFBFFFRRL
FBFBFBFRRR
FBBBBBFRLL
BFFFFFBRLL
FFFBBFBLRL
BFFFFFBLLL
BFFFBFBLLL
FBFBFFFRLR
BFBFFFFRLR
FBFBBFFRRL
BFBBFFFRLR
FFBFFFFRLL
FFFBBFBRRL
FBBBFFBLLL
BFBFBFBLRR
BFFFFBFRLL
BFBBFFBLLL
FBBFBBBLLL
FBBFBBBRLR
BBFFFFBRRL
BFBFBFFRRL
FBBBFBBRRL
BFBBBBFLRR
FFBFBBBRRR
FFFBFFFLRL
FFFBFFFRRR
FFBBFBBRRL
FFBFBFBLLR
BFBFFFBLLL
FBFBFFBLLL
BFFFBFBLRR
BFFBFFBLLL
BBFFFFBLRR
FFBFBFFRLR
FBFFFBFRLR
FFBBBBBRLR
FBFFFBFRLL
FBFBBBBRLL
FFBFFFBRRL
BFFFBBBLLL
FFBBBFBLLL
BFFFBFFRRR
FFFBBFFRLL
FFFBBBFRRL
FBFBBFFLRL
FFBBFFFLRR
FFFFBBBRRL
FFBBBBFLLL
FFBFFFBRLL
FBFFBBBRRL
BFBBFFFRRR
FFBBBFFLLR
FFBBBFFRRL
BFBBFBFRLR
FFFFBBFLLL
FFBBBBFRRL
FBBFFFFLLL
BFFFBBBRLR
FBFFBBBRLR
BFBBFFFLRL
BFBFBBFLLL
FBFFFFBRLR
BFFBBFFRRR
FBFBBBBLLL
BFFBFBBRLL
FBFBFFBRLR
BFBFBFFLLR
FFFFBBFRLL
BFFBFFFRRR
FBFBBBBRLR
BFBBBBFLRL
BFBFBFBLLL
BFBFFBBLRL
BFBFFBBLLR
BFBBFFBRLL
FFBFBBBLLL
BFBFBBBRLL
BFBFBBBRRR
FFFFBBBLRR
FFFBFBFLRR
BFFFBBBLLR
FBBBBBFLLL
FFFBBFBLLL
FBFBFFFRLL
FBBBFFFRLR
FFBFBFFLRR
FFFFBBFRLR
FFFFBFBRRR
FFFBBFBRLR
FFBFBFBLLL
FFBFFFFLRR
FFFBFBFRRR
FFBBFFFLLL
FBBBFFBLLR
BFBFBBBRRL
FFBBBFBLRL
BFBBBBBRRL
FFFBBBBLRR
FBBBFFBRRL
FFBFBFFRRL
FBBBBBBRLR
FBFFBFFRRR
BFFFFBFRLR
FFBBFFBRLL
BFFBBBFLLR
FBFBFBFRLL
BFBFBFBRLR
FBFFFBBLLR
FBFBFFBRRL
FBBFFFBRLL
FFBFBFBRLR
FFBFBFFRLL
FFFBFFBRLR
BFBFBFBRRR
FFFBBBBRRR
BFBFFBFRRR
BFBBFFBLRL
FBBFFBFRLL
BFFBBFFLRL
FFBFBFBRLL
FBFBBBBLRR
BFBFBFBRLL
BFBFFBFRRL
BFFFFFFRLR
FFBFFBBRRR
FFBBFBFLLR
FFFBBFFLLL
BFBBBFBLRL
FBFFFFBRLL
FBBBFBBRLR
BFFFBBFLRR
FBBBBFBRLR
BFBBBFFLLL
FBFBFBBLLL
BBFFFFBRLR
FBFBFFFLLR
FBFBBBBRRL
FFBFBBFRRL
BFFBBFFLLL
FBBFBBFLRR
BFFFFFBLLR
BFBBFFFLLL
FBBFBFFLRR
FBBFFBBRRR
FBFFFFFLRL
BFBFFFBLRR
FFFBFFBLRR
FBBFFBBRLL
BFBBBBBLRL
FFFBBBFLRR
BFBBBFBLLL
FBFFFBBRLR
FFBBFBBRLL
FBFFFBBLRR
FBFBBFFLLR
FFFFBBFRRL
FBBFFFFRRR
BFFBFFFLLR
FFFBBFFLRL
FFFBBBFLLR
BFFFBFFLRL
FBBBBFBLLR
FFBFBFBLRR
BFBBFBFLLL
BFFBBFFRLR
BFBBBBFLLR
FFFFBBFLRR
BFBFBBFLRL
BBFFFBFLRR
BFBBFBBRLR
FBFBFFBLRL
FFFBBFFLRR
FFBBFFFRRR
BFFBBBBLLR
BBFFFFBLRL
FBFFBBFLLL
FFFFBBFLLR
FBBBFBFRRL
FFBFFBBLRL
BFBBFFBLLR
BFBFFFFLLR
BFBBBBBRLR
BFBBFBFRLL
BFFBFFFLLL
FFBFFFFLLL
BFBFFBFLLL
FBBFFFFLRL
BFBBBBBLLR
BFFBBFBLRR
BFFFBFBLRL
FBBBFFFRLL
FBBFBFBRRL
FBFFFFFRRL
";
